{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muhammad Umer\\\\OneDrive\\\\Desktop\\\\Cloud Semester Project\\\\frontend\\\\src\\\\components\\\\Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Typography, List, ListItem, ListItemText, Box } from '@mui/material';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [metrics, setMetrics] = useState([]);\n  const [historicalData, setHistoricalData] = useState([]);\n  useEffect(() => {\n    const fetchMetrics = async () => {\n      try {\n        const response = await axios.get('/metrics.json');\n        const data = response.data;\n        const metricsArray = Object.values(data);\n        setMetrics(metricsArray);\n      } catch (error) {\n        console.error('Error fetching metrics:', error);\n      }\n    };\n    fetchMetrics();\n    const interval = setInterval(fetchMetrics, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Mock historical data for the chart\n  useEffect(() => {\n    const generateHistoricalData = () => {\n      const data = [];\n      for (let i = 0; i < 24; i++) {\n        data.push({\n          time: `${i}:00`,\n          delay: Math.random() * 20,\n          reliability: Math.random() * 100\n        });\n      }\n      setHistoricalData(data);\n    };\n    generateHistoricalData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Line Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: metrics.map(metric => /*#__PURE__*/_jsxDEV(ListItem, {\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: metric.line_name,\n          secondary: `Status: ${metric.status} | Delay: ${metric.delay_minutes} min | Reliability: ${metric.reliability_percentage.toFixed(1)}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, metric.line_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      sx: {\n        mt: 4\n      },\n      children: \"Historical Performance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        height: 300\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: historicalData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            yAxisId: \"left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            yAxisId: \"right\",\n            orientation: \"right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            yAxisId: \"left\",\n            type: \"monotone\",\n            dataKey: \"delay\",\n            stroke: \"#8884d8\",\n            name: \"Average Delay (min)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            yAxisId: \"right\",\n            type: \"monotone\",\n            dataKey: \"reliability\",\n            stroke: \"#82ca9d\",\n            name: \"Reliability (%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"MdL9MC3pYXNwU76iKOq87H/jcR4=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","Typography","List","ListItem","ListItemText","Box","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","axios","jsxDEV","_jsxDEV","Dashboard","_s","metrics","setMetrics","historicalData","setHistoricalData","fetchMetrics","response","get","data","metricsArray","Object","values","error","console","interval","setInterval","clearInterval","generateHistoricalData","i","push","time","delay","Math","random","reliability","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","map","metric","primary","line_name","secondary","status","delay_minutes","reliability_percentage","toFixed","line_id","sx","mt","height","width","strokeDasharray","dataKey","yAxisId","orientation","type","stroke","name","_c","$RefreshReg$"],"sources":["C:/Users/Muhammad Umer/OneDrive/Desktop/Cloud Semester Project/frontend/src/components/Dashboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Typography, List, ListItem, ListItemText, Box } from '@mui/material';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\nimport axios from 'axios';\r\n\r\ninterface TransportMetric {\r\n  line_id: string;\r\n  line_name: string;\r\n  status: string;\r\n  delay_minutes: number;\r\n  reliability_percentage: number;\r\n  disruptions: number;\r\n  congestion_level: number;\r\n  timestamp: string;\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const [metrics, setMetrics] = useState<TransportMetric[]>([]);\r\n  const [historicalData, setHistoricalData] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchMetrics = async () => {\r\n      try {\r\n        const response = await axios.get('/metrics.json');\r\n        const data = response.data;\r\n        const metricsArray = Object.values(data) as TransportMetric[];\r\n        setMetrics(metricsArray);\r\n      } catch (error) {\r\n        console.error('Error fetching metrics:', error);\r\n      }\r\n    };\r\n\r\n    fetchMetrics();\r\n    const interval = setInterval(fetchMetrics, 30000); // Update every 30 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Mock historical data for the chart\r\n  useEffect(() => {\r\n    const generateHistoricalData = () => {\r\n      const data = [];\r\n      for (let i = 0; i < 24; i++) {\r\n        data.push({\r\n          time: `${i}:00`,\r\n          delay: Math.random() * 20,\r\n          reliability: Math.random() * 100,\r\n        });\r\n      }\r\n      setHistoricalData(data);\r\n    };\r\n\r\n    generateHistoricalData();\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Line Status\r\n      </Typography>\r\n      <List>\r\n        {metrics.map((metric) => (\r\n          <ListItem key={metric.line_id}>\r\n            <ListItemText\r\n              primary={metric.line_name}\r\n              secondary={`Status: ${metric.status} | Delay: ${metric.delay_minutes} min | Reliability: ${metric.reliability_percentage.toFixed(1)}%`}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n\r\n      <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\r\n        Historical Performance\r\n      </Typography>\r\n      <Box sx={{ height: 300 }}>\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <LineChart data={historicalData}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"time\" />\r\n            <YAxis yAxisId=\"left\" />\r\n            <YAxis yAxisId=\"right\" orientation=\"right\" />\r\n            <Tooltip />\r\n            <Line\r\n              yAxisId=\"left\"\r\n              type=\"monotone\"\r\n              dataKey=\"delay\"\r\n              stroke=\"#8884d8\"\r\n              name=\"Average Delay (min)\"\r\n            />\r\n            <Line\r\n              yAxisId=\"right\"\r\n              type=\"monotone\"\r\n              dataKey=\"reliability\"\r\n              stroke=\"#82ca9d\"\r\n              name=\"Reliability (%)\"\r\n            />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Dashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}